const express = require("express");
const router = express.Router();
const User = require("../models/user");

// Function to generate a new employee ID
async function generateEmployeeId() {
  const count = await User.countDocuments().exec();
  return count + 1;
}

// Insert user to DB
router.post("/add", async (req, res) => {
  try {
    const employeeId = await generateEmployeeId(); // Generate the new employee ID

    // Create a new user instance
    const user = new User({
      employeeId, // Assign the generated employee ID
      name: req.body.name,
      address: req.body.address,
      age: req.body.age,
      department: req.body.department,
      status: req.body.status,
    });

    // Save the user and wait for completion
    await user.save();

    // Set a success message in the session
    req.session.message = {
      type: "success",
      message: "User Added Successfully",
    };

    // Redirect to the home page
    res.redirect("/");
  } catch (err) {
    // Respond with an error message
    res.json({ message: err.message, type: "Danger" });
  }
});

// Get all users route
router.get("/", async (req, res) => {
  try {
    const users = await User.find().exec(); // Fetch all users from the database
    res.render("index", {
      title: "Home Page",
      users: users, // Pass users to the index view
    });
  } catch (err) {
    res.json({ message: err.message });
  }
});

// Render the add user form
router.get("/add", (req, res) => {
  res.render("add_users", { title: "Add Users" });
});

module.exports = router;


////////////app files//////////


// imports
require("dotenv").config();
const express = require("express");
const mongoose = require("mongoose");
const session = require("express-session");
const router = require("./routes/routes.js");

const app = express();
const PORT = process.env.PORT || 4000;
app.set("view engine", "ejs");

// database connection
mongoose.connect(process.env.DB_URI, {
  useNewUrlParser: true,
  useUnifiedTopology: true,
});
const db = mongoose.connection;
db.on("error", (error) => {
  console.error("Database connection error:", error);
});
db.once("open", () => {
  console.log("Connected to the database");
});

//middlewares
app.use(express.urlencoded({ extended: false }));
app.use(express.json());
app.use(
  session({
    secret: "My Sceret Key",
    saveUninitialized: true,
    resave: false,
  })
);
app.use((req, res, next) => {
  res.locals.message = req.session.message;
  delete req.session.message;
  next();
});

//set the template engine
app.set("view engine ", "ejs");

//route prefix
app.use("", router);

app.listen(PORT, (err) => {
  if (err) {
    console.error("Server failed to start:", err);
  } else {
    console.log(`Server is running on port ${PORT}`);
  }
});

